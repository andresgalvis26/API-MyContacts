name: CI/CD Pipeline - API Contactos

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Job de pruebas y validaciones
  test:
    name: Tests & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Instalar dependencias
      run: |
        npm ci
        npm audit --audit-level moderate
    
    - name: Ejecutar linter (si tienes ESLint)
      run: |
        # npm run lint || echo "Linter no configurado"
        echo "Linter paso omitido (configurable)"
      continue-on-error: true
    
    - name: Ejecutar pruebas unitarias
      run: npm test
    
    - name: Generar reporte de cobertura
      run: npm run test:coverage
    
    - name: Subir cobertura a Codecov (opcional)
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
    
    - name: Verificar que el servidor puede iniciar
      run: |
        timeout 10s npm start || echo "Servidor validado"

  # Job de seguridad
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Instalar dependencias
      run: npm ci
    
    - name: Ejecutar auditor√≠a de seguridad
      run: |
        npm audit --audit-level high
        # npm run security-check || echo "Verificaciones adicionales de seguridad"

  # Job de build (si necesitas compilar algo)
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
    
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Instalar dependencias
      run: npm ci
    
    - name: Crear build (si aplica)
      run: |
        echo "Build completado para API Node.js"
        # npm run build || echo "No hay proceso de build definido"
    
    - name: Archivar artefactos
      uses: actions/upload-artifact@v4
      with:
        name: api-contactos-${{ github.sha }}
        path: |
          src/
          package*.json
          !node_modules/

  # Job de deployment (simulado)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Simular deployment a staging
      run: |
        echo "üöÄ Deploying to STAGING environment"
        echo "Environment: staging"
        echo "Version: ${{ github.sha }}"
        # Aqu√≠ ir√≠an los comandos reales de deployment
        sleep 5
        echo "‚úÖ Deployment to staging completed"

  deploy-production:
    name: Deploy to Production  
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Simular deployment a producci√≥n
      run: |
        echo "üöÄ Deploying to PRODUCTION environment"
        echo "Environment: production"
        echo "Version: ${{ github.sha }}"
        # Aqu√≠ ir√≠an los comandos reales de deployment
        sleep 8
        echo "‚úÖ Deployment to production completed"

  # Job de notificaciones
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notificar resultados
      run: |
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.security.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
          echo "‚úÖ Pipeline completado exitosamente"
        else
          echo "‚ùå Pipeline fall√≥ en alg√∫n paso"
          exit 1
        fi